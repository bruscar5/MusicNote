#BlueJ class context
comment0.params=
comment0.target=Heap()
comment0.text=\n\ Default\ constructor\:\ creates\ empty\ heap\n
comment1.params=items
comment1.target=Heap(java.lang.Object[])
comment1.text=\n\ Constructor\:\ builds\ heap\ from\ array\ of\ Objects\n
comment2.params=array
comment2.target=java.lang.Object[]\ makeHeap(java.lang.Object[])
comment2.text=\n\ Courtesy\ method\ to\ export\ heaps\ to\ the\ wider\ world\n\ @param\ array\:\ array\ of\ unsorted\ data\n\ @return\:\ same\ array,\ arranged\ as\ a\ heap\n
comment3.params=n
comment3.target=int\ parent(int)
comment3.text=\n\ @param\ n\:\ index\ of\ current\ node\n\ @return\:\ index\ of\ current\ node's\ parent\ (if\ it\ exists)\n
comment4.params=n
comment4.target=int\ leftChild(int)
comment4.text=\n\ @param\ n\:\ index\ of\ current\ node\n\ @return\:\ index\ of\ current\ node's\ left\ child\ (if\ it\ exists)\n
comment5.params=n
comment5.target=int\ rightChild(int)
comment5.text=\n\ @param\ n\:\ index\ of\ current\ node\n\ @return\:\ index\ of\ current\ node's\ right\ child\ (if\ it\ exists)\n
comment6.params=entry
comment6.target=void\ addEntry(java.lang.Object)
comment6.text=\n\ @param\ entry\:\ item\ to\ be\ added\ to\ Heap\n\ Adds\ data\ item\ to\ heap\ and\ adjusts\ tree\ as\ necessary\ to\ maintain\n\ heap\ condition;\ resizes\ array\ if\ necessary\ to\ accommodate\ entry\n
comment7.params=n
comment7.target=void\ reHeapUp(int)
comment7.text=\n\ Restores\ heap\ condition\ when\ addition\ of\ new\ data\ results\ in\ \n\ invalid\ heap\n\ @param\ n\:\ index\ of\ item\ just\ added\n
comment8.params=
comment8.target=java.lang.Object\ getTop()
comment8.text=\n\ Returns\ value\ from\ top\ of\ heap,\ then\ restores\ heap\ condition\n\ @return\:\ item\ at\ top\ of\ heap\n
comment9.params=n
comment9.target=void\ reHeapDown(int)
comment9.text=\n\ Restores\ heap\ condition\ after\ top\ item\ has\ been\ removed\n
numComments=10
